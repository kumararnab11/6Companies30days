/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void ready_parent(TreeNode* root,unordered_map<TreeNode*,TreeNode*> &parent,TreeNode* &target,int k){
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* temp=q.front();
            q.pop();
            if(temp->val==k)target=temp;
            
            if(temp->left){
                parent[temp->left]=temp;
                q.push(temp->left);
            }
            if(temp->right){
                parent[temp->right]=temp;
                q.push(temp->right);
            }
        }
    }

    int amountOfTime(TreeNode* root, int k) {
        unordered_map<TreeNode* ,TreeNode*> parent;
        TreeNode* target=NULL;
        ready_parent(root,parent,target,k);

        unordered_set<TreeNode*> visited;
        queue<TreeNode*> q;
        int dist=0;
        q.push(target);
        visited.insert(target);

        while(!q.empty()){
            int s=q.size();
            for(int i=0;i<s;i++){
                TreeNode* temp=q.front();
                q.pop();
                if((temp!=root)&&(visited.find(parent[temp])==visited.end())){
                    q.push(parent[temp]);
                    visited.insert(parent[temp]);
                }
                if(temp->left){
                    if(visited.find(temp->left)==visited.end()){
                    q.push(temp->left);
                    visited.insert(temp->left);
                    }
                }
                if(temp->right){
                    if(visited.find(temp->right)==visited.end()){
                    q.push(temp->right);
                    visited.insert(temp->right);
                    }
                }
            }
        dist++;
        }
        return dist-1;
    }
};

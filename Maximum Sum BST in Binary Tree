/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    vector<int> fn(TreeNode* root,int &ans){
        if(!root)return {1,INT_MIN,INT_MAX,0};

        vector<int> l=fn(root->left,ans);
        vector<int> r=fn(root->right,ans);

        int lValid=l[0],lSum=l[3],lMaxi=l[1],lMini=l[2];
        int rValid=r[0],rSum=r[3],rMaxi=r[1],rMini=r[2];

        // cout<<root->val<<"\n";
        // for(int i=0;i<4;i++){
        //     cout<<l[i]<<" ";
        // }
        // cout<<endl;
        // for(int i=0;i<4;i++){
        //     cout<<r[i]<<" ";
        // }
        //cout<<endl;

        if(lValid==1&&rValid==1){
            if(lMaxi<root->val&&rMini>root->val){
                ans=max(ans,root->val+rSum+lSum);
                return {1,(rMaxi==INT_MIN)?root->val:rMaxi,(lMini==INT_MAX)?root->val:lMini,root->val+rSum+lSum};
            }
        }

        return {0,INT_MAX,INT_MIN,INT_MIN};

    }
public:
    int maxSumBST(TreeNode* root) {
        int ans=0;

        fn(root,ans);

        return ans;
    }
};

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        const int INF = 1e9;
        vector<vector<int>> mat(n, vector<int>(n, INF));

        // Initialize adjacency matrix
        for (auto &it : edges) {
            mat[it[0]][it[1]] = it[2];
            mat[it[1]][it[0]] = it[2];
        }
        for (int i = 0; i < n; i++) mat[i][i] = 0;

        // Floyd-Warshall Algorithm
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    mat[i][j] = min(mat[i][j], mat[i][k] + mat[k][j]);
                }
            }
        }

        // Find the city with the smallest number of reachable cities
        int city = 0, minReachable = INF;
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (mat[i][j] <= distanceThreshold) count++;
            }
            if (count < minReachable || (count == minReachable && i > city)) {
                minReachable = count;
                city = i;
            }
        }

        return city;
    }
};

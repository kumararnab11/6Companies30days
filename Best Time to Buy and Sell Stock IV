class Solution {
private:
    int fn(vector<int> &prices,int i,int buy,int k,int n,vector<vector<vector<int>>> &dp){
        if(i==n)return 0;
        if(dp[buy][i][k]!=-1)return dp[buy][i][k];
        if(buy==1){
            if(k==0)return 0;
            return dp[buy][i][k]= max((-prices[i]+fn(prices,i+1,0,k-1,n,dp)),fn(prices,i+1,1,k,n,dp));
        }
        else{
            return dp[buy][i][k]= max(prices[i]+fn(prices,i+1,1,k,n,dp),fn(prices,i+1,0,k,n,dp));
        }
    }
public:
    int maxProfit(int k,vector<int>& prices) {
        int n=prices.size();
        // vector<vector<vector<int>>> dp(2,vector<vector<int>>(n,vector<int>(k+1,-1)));
        // return fn(prices,0,1,k,n,dp);

        // vector<vector<vector<int>>> dp(2, vector<vector<int>>(n + 1, vector<int>(k + 1, 0)));

        // for(int i=n-1;i>=0;i--){
        //     for(int buy=0;buy<=1;buy++){
        //         for(int cap=0;cap<=k;cap++){
        //             if(buy==1){
        //                 if(cap==0)dp[buy][i][cap]=0;
        //                 else dp[buy][i][cap]= max(-prices[i]+dp[0][i+1][cap-1],dp[1][i+1][cap]);
        //             }
        //             else{
        //                 dp[buy][i][cap]= max(prices[i]+dp[1][i+1][cap],dp[0][i+1][cap]);
        //             }
        //         }
        //     }
        // }
        
        // return dp[1][0][k]; 

        vector<vector<int>> dp(2,vector<int>(k+1)),ahead(2,vector<int>(k+1));
        for(int i=n-1;i>=0;i--){
            for(int buy=0;buy<=1;buy++){
                for(int cap=0;cap<=k;cap++){
                    if(buy==1){
                        if(cap==0)dp[buy][cap]=0;
                        else dp[buy][cap]= max(-prices[i]+ahead[0][cap-1],ahead[1][cap]);
                    }
                    else{
                        dp[buy][cap]= max(prices[i]+ahead[1][cap],ahead[0][cap]);
                    }
                }
            }
            ahead=dp;
        }
        return ahead[1][k];
    }
};

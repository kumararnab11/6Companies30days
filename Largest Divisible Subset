class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        vector<int> dp(n,1),hash(n);

        for(int i=0;i<n;i++)hash[i]=i;

        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0){
                    if(dp[j]+1>dp[i]){
                        dp[i]=dp[j]+1;
                        hash[i]=j;
                    }
                }
            }
        }
        
        int maxi=-1,ind=-1;
        
        for(int i=0;i<n;i++){
            if(dp[i]>maxi){
                maxi=dp[i];
                ind=i;
            }
        }
        vector<int> ans;
        while(hash[ind]!=ind){
            ans.push_back(nums[ind]);
            ind=hash[ind];
        }
        ans.push_back(nums[ind]);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
